import Foundation
import Basic
import Utility
import Devops

// TODO: A higher-level 'CommandHandler' is needed.
// https://www.hackingwithswift.com/articles/44/apple-s-new-utility-library-will-power-up-command-line-apps

guard let project = loadProject() else {
    print("Cannot load `dop.json`")
    exit(1)
}

do {
    let parser = ArgumentParser(usage: "subcommand <options>", overview: "Support devops workflows")

//    let initParser = parser.add(subparser: "init", overview: "Initialize the package for managegement by dop")
//    let numbers = initParser.add(positional: "numbers", kind: [Int].self, usage: "List of numbers to operate with.")
    
    parser.add(subparser: "init", overview: "Initialize the package for managegement")
    parser.add(subparser: "login", overview: "Connect to IBM Cloud")
    parser.add(subparser: "bump-version", overview: "Bump the version")
    parser.add(subparser: "image-build", overview: "Build the container image")
    parser.add(subparser: "image-run", overview: "Run the image as a local container")
    parser.add(subparser: "image-push", overview: "Push the image to the registry")
    parser.add(subparser: "clean", overview: "Remove all files generated by dop")

    let result = try parser.parse(Array(CommandLine.arguments.dropFirst()))

    guard let subcommand = result.subparser(parser) else {
        parser.printUsage(on: stdoutStream)
        exit(0)
    }

    switch (subcommand) {
    case "init":
        // result.get(numbers)!
        InitJob(project: project).run()

    case "login":
        LoginJob(project: project).run()

    case "bump-version":
        BumpVersionJob(project: project).run()

    case "image-build":
        BuildImageJob(project: project).run()

    case "image-run":
        RunImageJob(project: project).run()

    case "image-push":
        PushImageJob(project: project).run()
    case "clean":
        CleanJob(project: project).run()

    default:
        print("Unrecognized command '\(subcommand)'")
    }
} catch let error as ArgumentParserError {
    print(error.description)
} catch {
    print(error.localizedDescription)
}
