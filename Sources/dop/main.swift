import Foundation
import Basic
import Utility
import Devops

// TODO: Somehow extract to functions.
// TODO: A higher-level 'CommandHandler' is needed.
// https://www.hackingwithswift.com/articles/44/apple-s-new-utility-library-will-power-up-command-line-apps

final class DopCLITool {
    let toolVersion = "0.9.1"

    func run() {
        do {
            let project = try Project(from: URL(fileURLWithPath: "dop.json"))

            let parser = ArgumentParser(usage: "subcommand <options>", overview: "Support devops workflows")
            let versionOption = parser.add(option: "--version", shortName: "-v", kind: Bool.self, usage: "Show the version")

            parser.add(subparser: "init", overview: "Initialize the package for managegement")

            parser.add(subparser: "login", overview: "Connect to IBM Cloud")

            parser.add(subparser: "version-bump", overview: "Bump the version")

            let buildImageParser = parser.add(subparser: "image-build", overview: "Build the container image")
            let bipBump = buildImageParser.add(option: "--bump", shortName: "-b", kind: Bool.self, usage: "Bump version before building image")

            parser.add(subparser: "image-run", overview: "Run the image as a local container")

            parser.add(subparser: "image-push", overview: "Push the image to the registry")

            parser.add(subparser: "release-upgrade", overview: "Upgrade a release")

            parser.add(subparser: "clean", overview: "Remove all files generated by dop")

            let result = try parser.parse(Array(CommandLine.arguments.dropFirst()))

            if let subcommand = result.subparser(parser) {
                switch (subcommand) {
                case "init":
                    InitJob(project: project).run()

                case "login":
                    LoginJob(project: project).run()

                case "version-bump":
                    BumpVersionJob(project: project).run()

                case "image-build":
                    BuildImageJob(project: project, bump: result.get(bipBump) ?? false).run()

                case "image-run":
                    RunImageJob(project: project).run()

                case "image-push":
                    PushImageJob(project: project).run()

                case "release-upgrade":
                    UpgradeReleaseJob(project: project).run()

                case "clean":
                    CleanJob(project: project).run()

                default:
                    print("Unrecognized command '\(subcommand)'")
                }
            } else {
                if let _ = result.get(versionOption) {
                    print("Version \(toolVersion)")
                } else {
                    parser.printUsage(on: stdoutStream)
                }

                exit(0)
            }
        } catch let error as ArgumentParserError {
            print(error.description)
        } catch {
            print(error.localizedDescription)
        }
    }
}

let tool = DopCLITool()
tool.run()
